///
///  Generated by Swift GYB.
///


extension AttributedTextBuilder {
    public static func buildBlock<C0, C1>(
    _ c0: C0, _ c1: C1
    ) -> TupleText<(C0, C1)> where C0: AttributedText, C1: AttributedText {
        TupleText {
            var c0i = C0.AttributedTextInterpolation(c0); let c0r = c0i.build()
            var c1i = C1.AttributedTextInterpolation(c1); let c1r = c1i.build()
            return [.attributedString(c0r), .attributedString(c1r)]
        }
    }
    public static func buildBlock<C0, C1, C2>(
    _ c0: C0, _ c1: C1, _ c2: C2
    ) -> TupleText<(C0, C1, C2)> where C0: AttributedText, C1: AttributedText, C2: AttributedText {
        TupleText {
            var c0i = C0.AttributedTextInterpolation(c0); let c0r = c0i.build()
            var c1i = C1.AttributedTextInterpolation(c1); let c1r = c1i.build()
            var c2i = C2.AttributedTextInterpolation(c2); let c2r = c2i.build()
            return [.attributedString(c0r), .attributedString(c1r), .attributedString(c2r)]
        }
    }
    public static func buildBlock<C0, C1, C2, C3>(
    _ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3
    ) -> TupleText<(C0, C1, C2, C3)> where C0: AttributedText, C1: AttributedText, C2: AttributedText, C3: AttributedText {
        TupleText {
            var c0i = C0.AttributedTextInterpolation(c0); let c0r = c0i.build()
            var c1i = C1.AttributedTextInterpolation(c1); let c1r = c1i.build()
            var c2i = C2.AttributedTextInterpolation(c2); let c2r = c2i.build()
            var c3i = C3.AttributedTextInterpolation(c3); let c3r = c3i.build()
            return [.attributedString(c0r), .attributedString(c1r), .attributedString(c2r), .attributedString(c3r)]
        }
    }
    public static func buildBlock<C0, C1, C2, C3, C4>(
    _ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4
    ) -> TupleText<(C0, C1, C2, C3, C4)> where C0: AttributedText, C1: AttributedText, C2: AttributedText, C3: AttributedText, C4: AttributedText {
        TupleText {
            var c0i = C0.AttributedTextInterpolation(c0); let c0r = c0i.build()
            var c1i = C1.AttributedTextInterpolation(c1); let c1r = c1i.build()
            var c2i = C2.AttributedTextInterpolation(c2); let c2r = c2i.build()
            var c3i = C3.AttributedTextInterpolation(c3); let c3r = c3i.build()
            var c4i = C4.AttributedTextInterpolation(c4); let c4r = c4i.build()
            return [.attributedString(c0r), .attributedString(c1r), .attributedString(c2r), .attributedString(c3r), .attributedString(c4r)]
        }
    }
    public static func buildBlock<C0, C1, C2, C3, C4, C5>(
    _ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5
    ) -> TupleText<(C0, C1, C2, C3, C4, C5)> where C0: AttributedText, C1: AttributedText, C2: AttributedText, C3: AttributedText, C4: AttributedText, C5: AttributedText {
        TupleText {
            var c0i = C0.AttributedTextInterpolation(c0); let c0r = c0i.build()
            var c1i = C1.AttributedTextInterpolation(c1); let c1r = c1i.build()
            var c2i = C2.AttributedTextInterpolation(c2); let c2r = c2i.build()
            var c3i = C3.AttributedTextInterpolation(c3); let c3r = c3i.build()
            var c4i = C4.AttributedTextInterpolation(c4); let c4r = c4i.build()
            var c5i = C5.AttributedTextInterpolation(c5); let c5r = c5i.build()
            return [.attributedString(c0r), .attributedString(c1r), .attributedString(c2r), .attributedString(c3r), .attributedString(c4r), .attributedString(c5r)]
        }
    }
    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(
    _ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6
    ) -> TupleText<(C0, C1, C2, C3, C4, C5, C6)> where C0: AttributedText, C1: AttributedText, C2: AttributedText, C3: AttributedText, C4: AttributedText, C5: AttributedText, C6: AttributedText {
        TupleText {
            var c0i = C0.AttributedTextInterpolation(c0); let c0r = c0i.build()
            var c1i = C1.AttributedTextInterpolation(c1); let c1r = c1i.build()
            var c2i = C2.AttributedTextInterpolation(c2); let c2r = c2i.build()
            var c3i = C3.AttributedTextInterpolation(c3); let c3r = c3i.build()
            var c4i = C4.AttributedTextInterpolation(c4); let c4r = c4i.build()
            var c5i = C5.AttributedTextInterpolation(c5); let c5r = c5i.build()
            var c6i = C6.AttributedTextInterpolation(c6); let c6r = c6i.build()
            return [.attributedString(c0r), .attributedString(c1r), .attributedString(c2r), .attributedString(c3r), .attributedString(c4r), .attributedString(c5r), .attributedString(c6r)]
        }
    }
    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(
    _ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7
    ) -> TupleText<(C0, C1, C2, C3, C4, C5, C6, C7)> where C0: AttributedText, C1: AttributedText, C2: AttributedText, C3: AttributedText, C4: AttributedText, C5: AttributedText, C6: AttributedText, C7: AttributedText {
        TupleText {
            var c0i = C0.AttributedTextInterpolation(c0); let c0r = c0i.build()
            var c1i = C1.AttributedTextInterpolation(c1); let c1r = c1i.build()
            var c2i = C2.AttributedTextInterpolation(c2); let c2r = c2i.build()
            var c3i = C3.AttributedTextInterpolation(c3); let c3r = c3i.build()
            var c4i = C4.AttributedTextInterpolation(c4); let c4r = c4i.build()
            var c5i = C5.AttributedTextInterpolation(c5); let c5r = c5i.build()
            var c6i = C6.AttributedTextInterpolation(c6); let c6r = c6i.build()
            var c7i = C7.AttributedTextInterpolation(c7); let c7r = c7i.build()
            return [.attributedString(c0r), .attributedString(c1r), .attributedString(c2r), .attributedString(c3r), .attributedString(c4r), .attributedString(c5r), .attributedString(c6r), .attributedString(c7r)]
        }
    }
    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(
    _ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8
    ) -> TupleText<(C0, C1, C2, C3, C4, C5, C6, C7, C8)> where C0: AttributedText, C1: AttributedText, C2: AttributedText, C3: AttributedText, C4: AttributedText, C5: AttributedText, C6: AttributedText, C7: AttributedText, C8: AttributedText {
        TupleText {
            var c0i = C0.AttributedTextInterpolation(c0); let c0r = c0i.build()
            var c1i = C1.AttributedTextInterpolation(c1); let c1r = c1i.build()
            var c2i = C2.AttributedTextInterpolation(c2); let c2r = c2i.build()
            var c3i = C3.AttributedTextInterpolation(c3); let c3r = c3i.build()
            var c4i = C4.AttributedTextInterpolation(c4); let c4r = c4i.build()
            var c5i = C5.AttributedTextInterpolation(c5); let c5r = c5i.build()
            var c6i = C6.AttributedTextInterpolation(c6); let c6r = c6i.build()
            var c7i = C7.AttributedTextInterpolation(c7); let c7r = c7i.build()
            var c8i = C8.AttributedTextInterpolation(c8); let c8r = c8i.build()
            return [.attributedString(c0r), .attributedString(c1r), .attributedString(c2r), .attributedString(c3r), .attributedString(c4r), .attributedString(c5r), .attributedString(c6r), .attributedString(c7r), .attributedString(c8r)]
        }
    }
    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(
    _ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9
    ) -> TupleText<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where C0: AttributedText, C1: AttributedText, C2: AttributedText, C3: AttributedText, C4: AttributedText, C5: AttributedText, C6: AttributedText, C7: AttributedText, C8: AttributedText, C9: AttributedText {
        TupleText {
            var c0i = C0.AttributedTextInterpolation(c0); let c0r = c0i.build()
            var c1i = C1.AttributedTextInterpolation(c1); let c1r = c1i.build()
            var c2i = C2.AttributedTextInterpolation(c2); let c2r = c2i.build()
            var c3i = C3.AttributedTextInterpolation(c3); let c3r = c3i.build()
            var c4i = C4.AttributedTextInterpolation(c4); let c4r = c4i.build()
            var c5i = C5.AttributedTextInterpolation(c5); let c5r = c5i.build()
            var c6i = C6.AttributedTextInterpolation(c6); let c6r = c6i.build()
            var c7i = C7.AttributedTextInterpolation(c7); let c7r = c7i.build()
            var c8i = C8.AttributedTextInterpolation(c8); let c8r = c8i.build()
            var c9i = C9.AttributedTextInterpolation(c9); let c9r = c9i.build()
            return [.attributedString(c0r), .attributedString(c1r), .attributedString(c2r), .attributedString(c3r), .attributedString(c4r), .attributedString(c5r), .attributedString(c6r), .attributedString(c7r), .attributedString(c8r), .attributedString(c9r)]
        }
    }
}
